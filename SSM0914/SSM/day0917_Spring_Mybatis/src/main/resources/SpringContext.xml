<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

    <context:component-scan base-package="com.qst"></context:component-scan>
<!--    <aop:aspectj-autoproxy/>-->
    <context:property-placeholder location="classpath:database.properties"/>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="url" value="${url}"/>
        <property name="driverClassName" value="${driver}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
    </bean>
<!--    创建SqlSessionFactoryBean-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="typeAliasesPackage" value="com.qst.pojo"/>
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
     </bean>
<!--    数据映射-->
<!--    <bean class="org.mybatis.spring.mapper.MapperFactoryBean">-->
<!--        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
<!--        <property name="mapperInterface" value="com.qst.dao.UserMapper"/>-->
<!--    </bean>-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.qst.dao"/>
    </bean>

<!--    声明式事务-->
<!--    1、事务管理器-->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="dataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
<!--    配置事务规则-->
    <tx:advice transaction-manager="dataSourceTransactionManager" id="interceptor">
<!--        PROPAGATION_REQUIRED：如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。-->
<!--        PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。-->
<!--        PROPAGATION_MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常。-->
<!--        PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。-->
<!--        PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。-->
<!--        PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。-->
<!--        PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类 似的操作-->
        <tx:attributes>
<!--            没有事务就创建事务-->
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="modify" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED"/>
<!--            非事务处理SUPPORTS-->
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
<!--    <aop:config>-->
<!--        <aop:pointcut id="pointcut" expression="execution(* com.qst.service..*.*(..))"/>-->
<!--        <aop:advisor advice-ref="interceptor" pointcut-ref="pointcut"/>-->
<!--    </aop:config>-->
</beans>